/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2012                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version         2.0;
    format          ascii;
    class           dictionary;
    object          codeDict;
}


erosionFlux
{
    // code
    // \left.\left(\frac{\partial \phi}{\partial z}\right)\right|_{\text {surface}} 
    // = -\frac{1}{D_{t}} \frac{\left|M_{\text {ero }}\right|}{A_{\mathrm{hol}}}
    code
    #{
        // 获得当前Patch的ID
        // label patchIndex = patch().index();

        fvPatchField<scalar> Q
        (
            patch().lookupPatchField<volScalarField, scalar>("T")
        );
        
        // 湍流黏度
        const fvPatchField<scalar>& nut
        (
            patch().lookupPatchField<volScalarField, scalar>("nut")
        );

        // 质量交换场
        const fvPatchField<scalar>& Mp
        (
            patch().lookupPatchField<volScalarField, scalar>("M")
        );
        
        //Info << "Patch ID: " << patchIndex << endl;
        Info << "Adopt mass exchange boundary condition on patch \"" << patch().name() << "\"...";

        // 获得全局的质量交换场
        //const surfaceScalarField & MGlobal = this->db().objectRegistry::lookupObject<surfaceScalarField>("M");
        
        // 获得当前Patch的质量交换场
        //const scalarField & Mp = MGlobal.boundaryField()[patchIndex];


        // 获得与边界面相邻网格格心处的雪漂浓度
         const tmp<scalarField> QInt = patch().lookupPatchField<volScalarField, scalar>("T").patchInternalField();

        vector zNormal = vector(0, 0, -1);

        forAll(patch().Sf(), i)
        {
            // 网格面在z方向的投影面积
            scalar zNormalArea = patch().Sf()[i] & zNormal;
            // z方向的浓度梯度
            scalar zGrad = Mp[i] / zNormalArea / (nut[i] + 1e-8);

            if(zGrad > 0 || fabs(patch().Cf()[i][2] - 8) < 1e-4)
            {
                zGrad = 0.;  //发生沉积时梯度为0
            }

            Q[i] = QInt()[i] - zGrad / patch().deltaCoeffs()[i];
        }

        operator == (Q);

        Info << "done." <<endl;
    #};
        
    // Optional
    codeInclude
    #{
        #include "fvCFD.H"
    #};

    // Optional
    codeOptions 
    #{
        -I$(LIB_SRC)/finiteVolume/lnInclude \
        -I$(LIB_SRC)/meshTools/lnInclude 
    #};
}

pack
{
    code
    #{
        pointField pVec(patch().meshPoints().size());
        const scalar maxHeight = 0.8;

        const scalar reposeAngle = 50;
        scalar edgeWidth = maxHeight / tan(degToRad(reposeAngle));

        const scalar front = 120;
        const scalar rear = 120 + 3*8;
        forAll(patch().localPoints(), i)
        {
            //Info << patch().localPoints()[i] << endl;
            
            pVec[i][0] = 0;
            pVec[i][1] = 0;
            if (patch().localPoints()[i][0] < front + edgeWidth)
            {
                pVec[i][2] = (patch().localPoints()[i][0] - front) / edgeWidth * maxHeight;
            }
            else if (patch().localPoints()[i][0] > rear - edgeWidth)
            {
                pVec[i][2] = (rear - patch().localPoints()[i][0]) / edgeWidth * maxHeight;
            }
            else
            {
                pVec[i][2] = maxHeight;
            }

        }

        const scalar left = 64;
        const scalar right = 64 + 2*8;
        forAll(patch().localPoints(), i)
        {
            //Info << patch().localPoints()[i] << endl;
            
            if (patch().localPoints()[i][1] < left + edgeWidth)
            {   
                scalar hTmp = (patch().localPoints()[i][1] - left) / edgeWidth * maxHeight;

                pVec[i][2] = pVec[i][2] > hTmp ? hTmp : pVec[i][2];
            }
            else if (patch().localPoints()[i][1] > right - edgeWidth)
            {
                scalar hTmp = (right - patch().localPoints()[i][1]) / edgeWidth * maxHeight;
                pVec[i][2] = pVec[i][2] > hTmp ? hTmp : pVec[i][2];
            }

        }
        (*this) == pVec;
    #};
}

erosionDeposition
{
    code
    #{
        
        label patchIndex = patch().index();
        const volScalarField& deltaH = this->db().objectRegistry::lookupObject<volScalarField>("deltaH");

        primitivePatchInterpolation facePointInterp(deltaH.mesh().boundaryMesh()[patchIndex]);   //初始化插值类

        const scalarField& deltaHp = deltaH.boundaryField()[patchIndex];
        auto deltaHpp = facePointInterp.faceToPointInterpolate(deltaHp);                      //面心向节点插值
        Info << "Successfully interpolate "<< deltaHpp().size() << " points." << endl;
        Info << "Local points number = " << patch().localPoints().size() << endl;
        pointField pVec(deltaHpp().size());

        const scalar front = 120;
        const scalar rear = 120 + 3*8;
        const scalar left = 64;
        const scalar right = 64 + 2*8;

        forAll(pVec, i)
        {
            pVec[i][0] = 0;
            pVec[i][1] = 0;
            pVec[i][2] = deltaHpp()[i];

            if(patch().localPoints()[i][2] + pVec[i][2] * this->db().time().deltaTValue() < 8)
            {    
                pVec[i][2] = (8 - patch().localPoints()[i][2])/this->db().time().deltaTValue();
            }

            if  ( 
                   fabs(patch().localPoints()[i][0] - front) < 1e-6 
                || fabs(patch().localPoints()[i][0] - rear ) < 1e-6
                || fabs(patch().localPoints()[i][1] - left ) < 1e-6
                || fabs(patch().localPoints()[i][1] - right) < 1e-6
                )
            {    
                pVec[i][2] = 0;
            }
        }

        (*this) == pVec;
    #};

    codeInclude
    #{
        #include "fvCFD.H"
        #include "primitivePatchInterpolation.H"
    #};

    codeOptions 
    #{
        -I$(LIB_SRC)/finiteVolume/lnInclude \
        -I$(LIB_SRC)/meshTools/lnInclude 
    #};
}


packZ
{
    code
    #{
        scalarField pVec(patch().meshPoints().size());
        const scalar maxHeight = 0.5;
        forAll(patch().localPoints(), i)
        {
            //Info << patch().localPoints()[i] << endl;
            
            if (patch().localPoints()[i][0] < -5.5 || patch().localPoints()[i][0] > 5.5)
            {
                pVec[i] = (6 - fabs(patch().localPoints()[i][0])) / 0.5 * maxHeight;
            }
            else
            {
                pVec[i] = maxHeight;
            }

        }
        (*this) == pVec * this->db().time().value() / 100;
    #};
}